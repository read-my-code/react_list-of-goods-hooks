{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortCondition","setSortCondition","reverseGoods","setReverseGoods","visibleGoods","goods","sortedGoods","sort","good1","good2","ALPHABETICALLY","localeCompare","BY_LENGTH","length","reverse","sortGoods","isResetButtonIsVisible","className","type","onClick","classNames","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qBAAAA,E,iBAAAA,M,KAyCE,IAAME,EAAM,WACjB,MAA0CC,mBAAwB,IAAlE,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EAlCR,SACEC,EADF,GAMa,IAHTL,EAGQ,EAHRA,cACAE,EAEQ,EAFRA,aAGII,EAAW,YAAOD,GAqBxB,OAnBIL,GACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAKJ,EAASc,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,UACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAYQ,UAGPR,EAMcS,CAAUlB,EAAiB,CAC9CG,gBACAE,iBAGIc,EAAyBhB,GAAiBE,EAWhD,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMlB,EAAiBL,EAASc,iBACzCO,UAAWG,IAAW,oBAAqB,CACzC,WAAYpB,IAAkBJ,EAASc,iBAJ3C,iCAUA,wBACEQ,KAAK,SACLC,QAAS,kBAAMlB,EAAiBL,EAASgB,YACzCK,UAAWG,IAAW,oBAAqB,CACzC,WAAYpB,IAAkBJ,EAASgB,YAJ3C,4BAUA,wBACEM,KAAK,SACLC,QAlCR,WACEhB,GAAgB,SAAAkB,GAAI,OAAKA,MAkCnBJ,UAAWG,IAAW,oBAAqB,CACzC,YAAalB,IAJjB,qBAUCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVE,QA1CV,WACElB,EAAiB,IACjBE,GAAgB,IAqCV,sBAUJ,6BACGC,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCzHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2789aef2.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABETICALLY = 'alp',\n  BY_LENGTH = 'lng',\n}\n\ninterface SortingParams {\n  sortCondition: SortType | '',\n  reverseGoods: boolean,\n}\n\nfunction sortGoods(\n  goods: string[],\n  {\n    sortCondition,\n    reverseGoods,\n  } : SortingParams,\n): string[] {\n  const sortedGoods = [...goods];\n\n  if (sortCondition) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortCondition) {\n        case SortType.ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SortType.BY_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseGoods) {\n    sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App = () => {\n  const [sortCondition, setSortCondition] = useState<SortType | ''>('');\n  const [reverseGoods, setReverseGoods] = useState(false);\n  const visibleGoods = sortGoods(goodsFromServer, {\n    sortCondition,\n    reverseGoods,\n  });\n\n  const isResetButtonIsVisible = sortCondition || reverseGoods;\n\n  function handleReverse() {\n    setReverseGoods(prev => !prev);\n  }\n\n  function handleReset() {\n    setSortCondition('');\n    setReverseGoods(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortCondition(SortType.ALPHABETICALLY)}\n          className={classNames('button is-warning', {\n            'is-light': sortCondition !== SortType.ALPHABETICALLY,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortCondition(SortType.BY_LENGTH)}\n          className={classNames('button is-success', {\n            'is-light': sortCondition !== SortType.BY_LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleReverse}\n          className={classNames('button is-warning', {\n            'is-light': !reverseGoods,\n          })}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonIsVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}